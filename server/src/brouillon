import { Router } from 'express';
import { User } from '../models/User';
import * as fs from 'fs';
import * as csv from 'csv-parser';
import { generatePassword, hashPassword } from '../utils/passwordUtils';

const router = Router();

router.post('/import', async (req, res) => {
  const users: { login: string; password: string }[] = [];

  fs.createReadStream('data/users.csv')
    .pipe(csv())
    .on('data', async (row) => {
      const nom = row['Nom'].toLowerCase();
      const prenom = row['Prénom'].toLowerCase();
      const login = `${nom}.${prenom}`;
      const password = generatePassword();
      const hashedPassword = await hashPassword(password);

      users.push({ login, password: hashedPassword });
    })
    .on('end', async () => {
      try {
        await User.insertMany(users);
        res.status(201).json({ message: 'Utilisateurs ajoutés avec succès.' });
      } catch (error) {
        res.status(500).json({ error: 'Erreur lors de l\'ajout des utilisateurs.' });
      }
    });

  // Handle any errors in the CSV parsing
  .on('error', (error) => {
    res.status(500).json({ error: 'Erreur lors de la lecture du fichier CSV.' });
  });
});

export default router;



------------------------------------------------------------------------------------------------------------------------

import * as bcrypt from 'bcrypt';

export const generatePassword = (length: number = 12): string => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
  let password = '';
  for (let i = 0; i < length; i++) {
    password += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return password;
};

export const hashPassword = async (password: string): Promise<string> => {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
};


---------------------------------------------------------------------------------

import * as XLSX from 'xlsx'
import fs from 'fs'
import csv from 'csv-parser'
import { Student } from '../models'

export const createStudentWithCsvFile = async (filePath: string) => {
    fs.createReadStream(filePath)
        .pipe(csv())
        .on('data', async (row) => {
            const last_name = row['nom']
            const first_name = row['prenom'].chartAt(0).toUpperCase()

            try {
                const existingStudent = await Student.findOne({
                    last_name,
                    first_name,
                })

                if (!existingStudent) {
                    const student = new Student({
                        last_name,
                        first_name,
                    })
                    await student.save()
                    console.log(`Étudiant ajouté : ${first_name} ${last_name}`)
                } else {
                    console.log(
                        `Étudiant déjà existant : ${first_name} ${last_name}`
                    )
                }
            } catch (error) {
                console.error(
                    `Erreur lors de la vérification ou de la création de l'étudiant : ${error}`
                )
            }
        })
        .on('end', () => {
            console.log('Le fichier CSV a été lu avec succès')
        })
}

export const createStudentWithXlsxFile = async (filePath: string) => {
    const fileBuffer = fs.readFileSync(filePath)

    // Convert Buffer to Uint8Array
    const arrayBufferView = new Uint8Array(fileBuffer)

    const workbook = XLSX.read(arrayBufferView, {
        type: 'array',
    })

    const worksheet = workbook.Sheets[workbook.SheetNames[0]]
    const studentsData: any[] = XLSX.utils.sheet_to_json(worksheet)

    for (const row of studentsData) {
        const last_name = row['NOM']
        const first_name =
            row['PRENOM'].charAt(0).toUpperCase() +
            row['PRENOM'].slice(1).toLowerCase()

        try {
            const existingStudent = await Student.findOne({
                last_name,
                first_name,
            })

            if (!existingStudent) {
                const student = new Student({
                    last_name,
                    first_name,
                })

                await student.save()
                console.log(`Étudiant ajouté : ${first_name} ${last_name}`)
            } else {
                console.log(
                    `Étudiant déjà existant : ${first_name} ${last_name}`
                )
            }
        } catch (error: any) {
            console.error(
                `Erreur lors de la vérification ou de la création de l'étudiant : ${error}`
            )
        }
    }

    console.log('Le fichier XLSX a été traité avec succès')
}
